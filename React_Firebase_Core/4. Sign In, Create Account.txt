auth 기능을 활용한 회원가입 및 로그인 기능 구현

firebase.auth.EmailAuthProvider 에 있는 

회원가입 : createUserWithEmailAndPassword
로그인 : signInWithEmailAndPassword 
를 통해서 구현 할 수 있다. 
위의 메소드들은 모두 Promise 이므로 async, await 을 사용해야 한다. 

onClick 함수와 onSubmit 함수를 
⭐⭐⭐직접 만든다.  

[ onClick ] 
onClick 함수는 ID와 PW input 태그에 붙여서
onClick 함수에는 사용자가 input 태그 내에 입력하는 값들을 name 속성을 이용하여 어디서 입력하였는지 알게 하고
이를 if ( e.target.value === 'ID' ){} else {} 로 구분하여 state 변경함수를 활용하여 ID와 PW를 업데이트 해준다. 

[ onSubmit ] 
submit 버튼을 누르면 강제적으로 새로고침이 되어 다음 페이지로 넘어가버린다. 
따라서 이를 방지하기 위해서 e.preventDefault(); 를 사용하여 폼의 제출을 막아준다. 
즉, 컨트롤의 주체를 나에게 달라는 명령어 이다. 

이후, 회원가입을 위한 코드, 로그인을 위한 코드가 들어가야하는데 이때는 
try catch 문을 사용하여 try 문에는 회원가입/로그인을 위한 코드(파이어베이스 함수)를 작성
if( newAccount === true ) await authService.createUserWithEmailAndPassword( email, password );
else await authService.signInWithEmailAndPassword( email, password);
    

[ persistence ]  
사용자들을 어떻게 기억할 것인지 선택하는 방법론 
local (기본 값) : 브라우저를 닫더라도 사용자 정보는 기억된다. 
session : 탭이 열려있는 동안에는 사용자 정보를 기억하는 것을 의미한다. 
none : 유저 정보를 기억하지 않음. 새로고침하면 바로 사라짐

❔근데 왜 로그인이 처리가 되었음에도 Home 화면으로 넘어가지 않는 것일까?
나의 컴퓨터가 로그인 이후에 currentUser를 넘겨달라고 Firebase 서버에게 요청한다. 
하지만 내 컴퓨터는 한국에 있고 Firebase 서버는 미국에 있어서 정보를 전달받는데 약 2초가 소요. 
내 컴퓨터는 이를 기다리지 않고 바로 currentUser 를 null로 출력한다. 
따라서 이를 해결하기 위해서는 Component 의 LifeCycle Hook인 useEffect 를 사용한다. 
useEffect( ( )=>{ 
    authService.onAuthstateChanged(( user )=>{
	if (user){
	   setIsLogin( true ); // 이제 Home 창을 띄울 것	
	}else{
	   setIsLogin( false );	
	}
})
}, [ ]  )

사용자의 로그인 상태 변경에 대한 관찰자를 추가한다. 
=> onAuthStateChanged( )




