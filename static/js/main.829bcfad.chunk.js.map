{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweets.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","reportWebVitals.js","index.js"],"names":["dotenv","config","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","event","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweets","nweetObj","itsMe","editToggle","setEditToggle","text","newNweet","setEditNewNweet","onDeleteClick","ok","window","confirm","console","log","doc","id","delete","attachmentURL","refFromURL","update","changeToggle","autoFocus","src","width","height","class","faTrash","faPencilAlt","NweetFactory","userObj","nwitter","setNwitter","attachment","setAttachment","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","for","faPlus","accept","reader","FileReader","readAsDataURL","files","onloadend","finished","result","opacity","backgroundImage","faTimes","Home","nwitters","setNwitters","useEffect","orderBy","onSnapshot","snapshot","temp","docs","map","data","marginTop","index","isLogin","setIsLogin","refreshUser","history","useHistory","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","maxWidth","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","displayName","updateProfile","args","currentUser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.829bcfad.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport 'firebase/auth'; \r\nimport 'firebase/firestore'; \r\nimport 'firebase/storage'; \r\nimport dotenv from 'dotenv';\r\ndotenv.config(); \r\n// console.log(process.env.REACT_APP_API_KEY); \r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\n\r\n  firebase.initializeApp(firebaseConfig); // 앱의 초기화 \r\n  \r\n  export const firebaseInstance = firebase; \r\n  export const authService = firebase.auth();\r\n  export const dbService = firebase.firestore(); \r\n  export const storageService = firebase.storage(); \r\n\r\n\r\n// Firebase 초기화 방식\r\n\r\n//   const firebaseConfig = {\r\n//     // ...\r\n//   };\r\n  \r\n//   // Initialize Firebase\r\n//   firebase.initializeApp(firebaseConfig);","import React, { useState } from 'react'; \r\nimport { authService} from 'fbase';\r\n\r\nconst AuthForm = () => {\r\n    const [email,setEmail] = useState(); \r\n    const [password,setPassword] = useState(); \r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(); \r\n\r\n     // state 변경함수 : 콜백 인자로 현재 state의 상태에 대해서 가져 올 수 있다. \r\n     const toggleAccount = ()=> setNewAccount((prev)=>{ return !prev});\r\n\r\n     const onChange = (e) =>{\r\n         if (e.target.name === 'email'){\r\n             setEmail(e.target.value); // name input이 변경될 때 마다, 그 value를 setEmail 변경함수를 통해서 변경하고 그 값을 input의 value 로 넣음\r\n            //  console.log('email state',email); \r\n         } else{ // pw 일때\r\n             setPassword(e.target.value); // 위와 동일한 Logic\r\n            //  console.log('password state',password); \r\n         }\r\n     }\r\n \r\n     const onSubmit = async(e) =>{\r\n         e.preventDefault(); \r\n         // 원래는 form 제출 버튼을 누르면 바로 제출되어 버림\r\n         // Submit 버튼을 눌렀을 때, 제출 방지 JS에게 내가 컨트롤 할거야! 라고 명령 \r\n         // 기본행위가 실행될 수 있는 것을 방지해줘라.\r\n \r\n         // 일단 이거 시도해보고 \r\n         try{\r\n             let result; \r\n             // true 일때는 회원가입 \r\n             if (newAccount === true) {\r\n                 result = await authService.createUserWithEmailAndPassword(email, password); \r\n \r\n             }else{ // false 일때는 로그인\r\n                 result = await authService.signInWithEmailAndPassword(email, password); \r\n             }\r\n            //  console.log(result); \r\n         }\r\n         \r\n         // 아니면 catch 문장을 띄워라\r\n         catch(error){\r\n             setError(error.message);\r\n         }\r\n     }\r\n \r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit} className=\"container\">\r\n                <input className=\"authInput\" name='email' type='email' placeholder='Email' onChange = {onChange}  required />\r\n                <input className=\"authInput\" name='password' type='password' placeholder='Password' onChange = {onChange}  required />\r\n                <input className=\"authInput authSubmit\" type='submit' value =\r\n                { newAccount // true 일때는 회원가입, false 일때는 로그인 버튼을 내보낸다. \r\n                ? \"Create Account\"  \r\n                : \"Sign In\" }></input>\r\n                {error && <span className=\"authError\">{error}</span>}\r\n            </form>\r\n            <span className=\"authSwitch\" onClick = {toggleAccount}> {newAccount ? 'Sign In' : 'Create new Account'} (으)로 전환</span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AuthForm; ","import { authService, firebaseInstance } from 'fbase';\r\nimport React, { useState } from 'react'; \r\nimport AuthForm from 'components/AuthForm'; \r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n     \r\n    const [error, setError] = useState(); \r\n\r\n    const onSocialClick = async(event) =>{\r\n        let provider; \r\n        if (event.target.name === 'google'){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider(); \r\n        }else if (event.target.name === 'github'){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider(); \r\n        }\r\n        await authService.signInWithPopup(provider);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon\r\n            icon={faTwitter}\r\n            color={\"#04AAFF\"}\r\n            size=\"3x\"\r\n            style={{ marginBottom: 30 }}\r\n            />\r\n            <AuthForm/>\r\n            <div className=\"authBtns\">\r\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n                </button>\r\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n    \r\nexport default Auth; ","import React, { useState } from 'react';\r\nimport { dbService,storageService } from 'fbase';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// itsMe 는 true/false 로 결과값을 받는 props\r\nconst Nweets = ({nweetObj, itsMe}) => {\r\n\r\n    // Toggle 의 상태로 수정 Form 상태를 관리\r\n    const [editToggle, setEditToggle] = useState(false);\r\n    // newNweet 는 수정할 내용을 띄우고 수정된 내용을 저장하는 state \r\n    const [newNweet, setEditNewNweet] = useState(nweetObj.text);  \r\n\r\n    // Delete\r\n    const onDeleteClick = async() => { \r\n        const ok = window.confirm('삭제하시겠습니까?');\r\n        console.log(ok); \r\n        if (ok === true) { // 삭제 \r\n            // console.log(nweetObj.id); // 해당 게시물의 id를 준다.            \r\n             const temp = await dbService.doc(`/nwitter/${nweetObj.id}`).delete(); // dbService.doc(파일 경로) -> 파일을 반환 \r\n             if (nweetObj.attachmentURL !== ''){// URL이 비어있지 않다면(사진이 올라오지 않은게 아니라면)\r\n             const ref = await storageService.refFromURL(nweetObj.attachmentURL).delete();\r\n             }\r\n        }\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        setEditNewNweet(event.target.value);  \r\n        console.log(newNweet); \r\n    }\r\n\r\n    // Update\r\n    const onSubmit = async(event) => {\r\n        // console.log('수정 제출'); \r\n        event.preventDefault();\r\n        await dbService.doc(`/nwitter/${nweetObj.id}`).update({text : newNweet});\r\n        setEditToggle((prev)=>!prev); \r\n    }\r\n\r\n    const changeToggle = () => {\r\n        setEditToggle((prev)=>!prev); \r\n    } \r\n\r\n    const onFileChange = () => {\r\n        console.log('파일 올라옴'); \r\n    }\r\n\r\n    return (\r\n        <div className=\"nweet\">\r\n        {editToggle //Toggle 이 true 라면 수정 Form 을 띄워주고 기존의 텍스트를 없애줌\r\n        ?\r\n            (\r\n                <>\r\n                    <form className=\"container nweetEdit\">\r\n                        <input className=\"formInput\" type='text' autoFocus value={newNweet} onChange={onChange}/> \r\n                        <input className=\"formBtn\" type='submit' onClick={onSubmit} value='Update Kweet!'/>\r\n                    </form>\r\n                    <span onClick={changeToggle} className=\"formBtn cancelBtn\">\r\n                        Cancel\r\n                    </span>\r\n                </>\r\n            )\r\n        : // Toggle 이 false 라면 수정 Form이 아닌 기존의 텍스트를 보여줌\r\n                <>\r\n                    <h5>{ nweetObj.text }</h5>\r\n                    { nweetObj.attachmentURL && \r\n                    <>\r\n                        <img src={nweetObj.attachmentURL} width='80px' height='100px'/>\r\n                    </> }\r\n                </>\r\n        }\r\n        { itsMe && ( // itsMe가 True이고 editToggle이 false(수정X)면 삭제버튼과 수정버튼을 보여줌\r\n            editToggle \r\n            ? null \r\n            :\r\n            <div class=\"nweet__actions\">\r\n                    <span onClick={onDeleteClick}>\r\n                        <FontAwesomeIcon icon={faTrash} />\r\n                    </span>\r\n                    <span onClick={changeToggle}>\r\n                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                    </span>\r\n            </div>\r\n        )}\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Nweets; ","import React, { useState } from 'react'; \r\nimport { storageService, dbService } from 'fbase';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory = ({userObj }) => {\r\n    const [nwitter, setNwitter]= useState(''); // 사용자의 입력값을 받는 state \r\n    const [attachment, setAttachment] = useState(''); // 사진 미리보기를 위한 URL을 담을 state\r\n  \r\n    const onSubmit = async (e) => {\r\n        if (nwitter === \"\") {\r\n            return;\r\n          }\r\n        // 일단 제출을 막는다. \r\n        e.preventDefault();\r\n\r\n        let attachmentURL = ''; // 객체에 firestorage에 저장되어 있는 URL을 담기 위한 변수\r\n        \r\n        // 만약 미리 띄운 사진의 URL을 담는 state가 빈칸이 아니라면?\r\n        if (attachment !== ''){\r\n            const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`); // 파이어 스토리지에 올릴 ref 만들기(storageService.ref().child(`폴더명(userid)/파일명(uuid를 통한 랜덤 생성)`))\r\n            // console.log(fileRef); \r\n            const response = await fileRef.putString(attachment, 'data_url'); // 파이어 스토리지에 putString을 통해 올리기 ( 이미지 URL , format 형식)\r\n            // console.log(response); \r\n            attachmentURL = await response.ref.getDownloadURL();    \r\n        }\r\n        await dbService.collection('nwitter').add({\r\n                text : nwitter, \r\n                createdAt : Date.now(),\r\n                creatorId : userObj.uid,\r\n                attachmentURL\r\n        });\r\n        // console.log(attachmentURL); \r\n        setNwitter(''); // 서버로 제출 이후에 바로 칸을 빈 것으로 만든다. \r\n        setAttachment('');\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        setNwitter(e.target.value);\r\n    }; \r\n\r\n    const onFileChange = (e) =>{\r\n\r\n        // Browser API : FileReader(); \r\n        const reader = new FileReader();\r\n        // 목표 : Img 의 URL을 가져와서 setAttachment에 넣어주는 것\r\n        // But, Text input 값은 e.target.value 로 가져올 수 있지만 , e.target.files 를 통한 img 파일은 Fake Path 를 반환해준다. \r\n        // 따라서, FileReader API를 활용하여 URL을 가져온다. \r\n        reader.readAsDataURL(e.target.files[0]);  // e.target.files는 파일을 여러개 선택을 대비하기 위한 API 사용 방법이므로 나는 하나만 할거니까 [0] 으로 선택 \r\n        reader.onloadend = (finished) => { // reader는 생명주기함수처럼 다룬다. 파일 로드가 끝나면 Attachment state에 img 의 주소를 담으라는 뜻\r\n            setAttachment(finished.target.result); // 이건 attachment에 URL을 담으라는 뜻, 만약 Img 미리보기를 취소하려면 attachment를 비워주면 된다. \r\n        }\r\n    };\r\n\r\n\r\n    const clearSetAttachment = () => {\r\n        setAttachment('');\r\n    }\r\n    return (\r\n        <>\r\n            <form className=\"factoryForm\">\r\n                <div className=\"factoryInput__container\">\r\n                    <input\r\n                    className=\"factoryInput__input\"\r\n                    value={nwitter}\r\n                    onChange={onChange}\r\n                    type=\"text\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    maxLength={120}\r\n                    />\r\n                    <input type=\"submit\" onClick={onSubmit} value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n                </div>\r\n                <label for=\"attach-file\" className=\"factoryInput__label\">\r\n                    <span>Add photos</span>\r\n                    <FontAwesomeIcon icon={faPlus} />\r\n                </label>\r\n                <input id=\"attach-file\"\r\n                    type=\"file\"\r\n                    accept=\"image/*\"\r\n                    onChange={onFileChange}\r\n                    style={{\r\n                    opacity: 0,\r\n                    }}/>\r\n                {/* <input type='submit' onClick={onSubmit} value='Kwitt!' />   */}\r\n                { attachment && \r\n                    (\r\n                        <div className=\"factoryForm__attachment\">\r\n                        <img src={attachment} style={{ backgroundImage: attachment}}/>\r\n                            <div className=\"factoryForm__clear\" onClick={clearSetAttachment}>\r\n                                <span>Remove</span>\r\n                                <FontAwesomeIcon icon={faTimes} />\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                } \r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NweetFactory;","import React, { useEffect, useState } from 'react'; \r\nimport {dbService} from 'fbase.js'; \r\nimport Nweets from 'components/Nweets.js'; \r\nimport NweetFactory from 'components/NweetFactory'; \r\n\r\nconst Home = ({userObj}) => {\r\n    const [nwitters, setNwitters] = useState([]); // 기존에 db에 있던 값들을 저장하기 위한 state\r\n    // const getNwitters = async() => {\r\n    //     // DB에 올라온 내용들을 가져오기 위한 .get()\r\n    //     // 하지만 dbNweets에는 FireStore SnapShot 이 찍히기 때문에 forEach로 콜백인자에 있는 .data()를 가져와야 함.\r\n    //     const dbNweets = await dbService.collection('nwitter').get();\r\n    //     dbNweets.forEach((document)=>{\r\n    //         // console.log(document.data()); // text, createdAt, creatorId \r\n    //         const nweetObject = { \r\n    //             ...document.data(), // text, createdAt, creatorId 풀어서 객체로 저장 \r\n    //             id: document.id\r\n    //         }; \r\n    //         // console.log(nweetObject);  // date, message, id\r\n    //         setNwitters((prev)=> [nweetObject, ...prev]); // 이전 데이터들과 현재 작성된 데이터를 합치는 작업\r\n    //     });\r\n    // }\r\n\r\n    useEffect(()=>{\r\n        // getNwitters();\r\n        dbService.collection('nwitter').orderBy(\"createdAt\",\"desc\").onSnapshot((snapshot)=> {\r\n            const temp = snapshot.docs.map((doc)=>{\r\n                return ({\r\n                    ...doc.data(),\r\n                    id : doc.id\r\n                });\r\n            });\r\n            setNwitters(temp);\r\n        })\r\n    }, []);\r\n\r\n    \r\n\r\n    return(\r\n     <div className ='container'>\r\n        <NweetFactory userObj={userObj}/>\r\n        <div style={{ marginTop: 30 }}>\r\n            {\r\n                nwitters.map((value,index)=>{\r\n                    return <Nweets nweetObj = {value} itsMe = {userObj.uid === value.creatorId}/> // itsMe 는 true 혹은 false 를 전달\r\n                    // return <h5>{value.text}</h5>;\r\n                })\r\n            }\r\n        </div>\r\n     </div>   \r\n    )\r\n};\r\nexport default Home;","import { authService, dbService } from 'fbase';\r\nimport React, { useEffect, useState } from 'react'; \r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport default ({isLogin ,setIsLogin, userObj, refreshUser}) => {\r\n\r\n    // let temp; \r\n\r\n    // const getMynweet = async() =>{\r\n    //     temp = await dbService.collection('nwitter')\r\n    //     .where(\"creatorId\", \"==\", userObj.uid)\r\n    //     .orderBy('createdAt','asc')\r\n    //     .get();\r\n    //     console.log(temp.docs); \r\n    //     // temp.docs.map((doc)=> console.log(doc.data())); \r\n    // }\r\n\r\n    // useEffect(()=>{\r\n    //     getMynweet(); \r\n        \r\n    // },[]);\r\n\r\n    let history = useHistory();\r\n    // const [ newDisplayName, setNewDisplayName ] = useState(userObj.displayName); \r\n    \r\n    const onLogOutClick =()=>{\r\n        authService.signOut(); // 로그아웃을 하는 Firebase 함수 .signOut();\r\n        // setIsLogin(false); \r\n        history.push('/'); \r\n    }\r\n\r\n    // const onChange = (e) => {\r\n    //     setNewDisplayName(e.target.value);\r\n    // }\r\n\r\n    // const onSubmit = async (e) =>{ // update displayName\r\n        \r\n    //     e.preventDefault();\r\n    //     if (userObj.displayName !== newDisplayName) { // 기존의 displayName과 newDisplayName 과 다를때만\r\n    //         await userObj.updateProfile({ // 인자 1. displaName 2. Photo URL\r\n    //             displayName : newDisplayName\r\n    //         }); \r\n    //         refreshUser(); \r\n    //         // console.log(userObj.displayName);\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div className='container'>       \r\n            {/* <form className='profileForm'> \r\n                <input\r\n                    // onChange={onChange}\r\n                    type=\"text\"\r\n                    autoFocus\r\n                    placeholder=\"Display name\"\r\n                    // value={newDisplayName}\r\n                    className=\"formInput\"\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Update Profile\"\r\n                    className=\"formBtn\"\r\n                    style={{\r\n                        marginTop: 10,\r\n                    }}\r\n                />\r\n            </form> */}\r\n            <span className=\"formBtn cancelBtn logOut\" \r\n            onClick={onLogOutClick}\r\n            >\r\n        Log Out\r\n      </span>\r\n                  \r\n        </div>\r\n    )\r\n}","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport React from 'react'; \r\nimport {Link} from 'react-router-dom'; \r\n\r\nconst Navigation = ({userObj}) => {\r\n    // console.log(userObj.displayName);  \r\n    return(\r\n    <div>\r\n        <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n        <Link to=\"/\" style={{ marginRight: 10 }}>\r\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n        </Link>\r\n            {/* <li><Link to='/profile'> { userObj.displayName == null? '닉네임을 설정하세요' : userObj.displayName+'의 Profile'  }  </Link></li> */}\r\n            \r\n            <Link\r\n                to=\"/profile\"\r\n                style={{\r\n                marginLeft: 10,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n                fontSize: 12,\r\n            }}\r\n            >\r\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n          <span style={{ marginTop: 10 }}>\r\n            {/* {userObj.displayName\r\n              ? `나의 Profile`\r\n              : \"Profile\"} */}\r\n              나의 Profile\r\n          </span>\r\n        </Link>\r\n        </ul>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react'; \r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport Auth from 'routes/Auth';\r\nimport Home from 'routes/Home';\r\nimport Profile from 'routes/Profile';\r\nimport Navigation from 'components/Navigation.js';\r\n\r\nconst AppRouter = ({isLogin ,setIsLogin, userObj, refreshUser})=>{\r\n    return (\r\n        <Router>\r\n            {/* 로그인이 되었을 때, Nav 바를 렌더링 해줌 */}\r\n            {isLogin ?<Navigation userObj={userObj}/> : null}\r\n            <Switch>\r\n            \r\n                {    \r\n                    isLogin === true \r\n                    ?\r\n                    // 로그인이 되어 있다면 홈으로 이동, 여기는 많은 Route를 추가할 것이기 때문에 부모요소로써 fragment로 감싸주었음\r\n                    <div\r\n                        style={{\r\n                        maxWidth: 890,\r\n                        width: \"100%\",\r\n                        margin: \"0 auto\",\r\n                        marginTop: 80,\r\n                        display: \"flex\",\r\n                        justifyContent: \"center\",\r\n                        }}>\r\n                        <Route exact path='/'>  \r\n                            <Home userObj={userObj}/>\r\n                        </Route>\r\n\r\n                        <Route exact path='/profile'>  \r\n                            <Profile refreshUser = {refreshUser} isLogin={isLogin} setIsLogin={setIsLogin} userObj={userObj}/>\r\n                        </Route>\r\n                    </div>\r\n                    // 로그인이 되어 있지 않다면 Auth 로 이동\r\n                    : \r\n                    <>\r\n                        <Route exact path='/'>\r\n                            <Auth/>\r\n                        </Route>\r\n                    </>\r\n                }\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter; ","import React, { useEffect, useState } from 'react';\nimport AppRouter from 'components/Router.js';\nimport {authService} from 'fbase.js';\n\nfunction App() {\n  const [init, setInit] = useState(false); // 아직 초기화되지 않은 상태, firebase가 프로그램을 초기화하기를 기다려야함\n  // 만약 init 이 false 라면 로딩중이라는 글씨를 띄울 것\n\n  const [isLogin, setIsLogin] = useState(false); // 로그인이 되어 있는지 체크하는 state \n  // console.log(authService.currentUser);\n\n  const [userObj, setUserObj] = useState(null); \n  // 글쓴이의 user id에 대해서 전달하기 위한 state, props 로 전달할 것임. \n\n  useEffect(()=>{\n    \n    setInit (true); \n    \n    // 로그인/로그아웃 상태 변경 관찰자, onAuthStateChanged() 변경이 감지되면 \n    authService.onAuthStateChanged((user)=> {\n      if (user){ // 뭐라도 찍혀있다면, \n        setIsLogin(true); \n        setUserObj({\n          uid : user.uid,\n          displayName : user.displayName, \n          updateProfile : (args) => user.updateProfile(args) \n        }); // userObj에 onAuthStateChanged의 내부 콜백 인자로 들어가 있는 user를 복사하였음\n      }else {\n        setIsLogin(false); \n      }\n    }); // user는 로그인 되어있다면 콘솔창에 찍혀있을 것이고 아니라면 콘솔창에 null 이 찍힐 것이다.  \n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser; // 새로 업데이트 된 객체 \n    setUserObj({\n      uid : user.uid,\n          displayName : user.displayName, \n          updateProfile : (args) => user.updateProfile(args) \n    });  // userObj 에 새로 업데이트 된 객체를 넣어준다. \n  }\n\n  return (\n    <>\n      { init ?<AppRouter refreshUser = {refreshUser} isLogin={isLogin} setIsLogin={setIsLogin} userObj={userObj}/> : 'Loading...'}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport reportWebVitals from 'reportWebVitals';\nimport \"./style.css\";\n \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}